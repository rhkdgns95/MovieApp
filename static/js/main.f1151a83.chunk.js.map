{"version":3,"sources":["typed-components.ts","theme.ts","Routes/Home/HomePresenter.tsx","Routes/Home/HomeQueries.ts","Routes/Home/index.tsx","Routes/Home/HomeContainer.tsx","Routes/Movie/MoviePresenter.tsx","Routes/Movie/MovieQueries.ts","Routes/Movie/index.tsx","Routes/Movie/MovieContainer.tsx","App.tsx","apollo.ts","global-styles.ts","index.tsx"],"names":["styled","default","ThemeProvider","createGlobalStyle","theme","blueColor","grayColor","Container","div","Card","Title","h2","props","CoverImg","img","Genres","Genre","span","RatingTitle","Rating","HomePresenter","data","isTrue","loading","GetMovies","map","movie","key","to","id","title","src","medium_cover_image","genres","genre","rating","GET_MOVIES","gql","Home","render","query","console","log","React","Component","Movie","Header","Link","MovieProfile","MovieIntro","h3","Text","Subscription","MoviePresenter","GetMovie","Fragment","xmlns","width","height","viewBox","d","large_cover_image","description_intro","GET_MOVIE","movieId","match","params","variables","parseInt","history","push","AppPresenter","path","exact","component","from","App","client","ApolloClient","uri","GlobalStyle","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.f1151a83.chunk.js","sourcesContent":["import * as StyleThings from \"styled-components\";\r\nimport { ThemedStyledComponentsModule } from \"styled-components\";\r\n\r\ninterface IProps {\r\n    blueColor: string;\r\n    grayColor: string;\r\n}\r\n\r\nconst {\r\n    default: styled,\r\n    ThemeProvider,\r\n    createGlobalStyle\r\n} = StyleThings as ThemedStyledComponentsModule<IProps>;\r\n\r\nexport { ThemeProvider, createGlobalStyle }; \r\nexport default styled;","\r\nconst theme = {\r\n    blueColor: \"blue\",\r\n    grayColor: \"gray\"\r\n};\r\n\r\nexport default theme;","import React from \"react\";\r\nimport styled from \"../../typed-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Container = styled.div`\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background-color: #f7f7f7;\r\n`;\r\n\r\nconst Card = styled.div`\r\n    width: 280px;\r\n    overflow: hidden;\r\n    margin: 30px;\r\n    border-radius: 6px;\r\n    position: relative;\r\n    box-shadow: 0 6px 12px rgba(0,0,0,0.24), 0 10px 24px rgba(0,0,0,.42);\r\n`;\r\nconst Title = styled.h2`\r\n    font-size: 18px;\r\n    text-align: center;\r\n    font-weight: 500;\r\n    color: ${props => props.theme.grayColor}\r\n`;\r\nconst CoverImg = styled.img`\r\n    display: block;\r\n    margin:0 auto;\r\n`;\r\nconst Genres = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    margin: 10px;\r\n`;\r\nconst Genre = styled.span`\r\n    padding: 5px;\r\n`;\r\nconst RatingTitle = styled.span`\r\n    margin-right: 5px;\r\n`;\r\nconst Rating = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    background-color: black;\r\n    color: white;\r\n    white-space: nowrap;\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    margin: 10px 0;\r\n    padding: 10px;\r\n    \r\n`\r\n\r\ninterface IProps {\r\n    data?: any;\r\n    loading: boolean;\r\n}\r\n\r\nconst HomePresenter: React.FC<IProps> = ({\r\n    data,\r\n    loading\r\n}) => {\r\n    const isTrue = !loading && data && data.GetMovies  && \"hi\"\r\n    return (\r\n        <Container>\r\n            {\r\n                isTrue && (\r\n                    data.GetMovies.map((movie: any, key: number) => (\r\n                        <Link to={`/details/${movie.id}`}>\r\n                            <Card key={key}>\r\n                                <Title>{ movie.title }</Title>\r\n                                <CoverImg src={ movie.medium_cover_image }/>\r\n                                <Genres>\r\n                                    {\r\n                                        movie.genres.map((genre: string[], key: number) => <Genre key={key}>{ genre }</Genre>)\r\n                                    }\r\n                                </Genres>\r\n                                <Rating>\r\n                                    <RatingTitle>\r\n                                        ★ Rating.\r\n                                    </RatingTitle>\r\n                                    {\r\n                                        movie.rating\r\n                                    }\r\n                                </Rating>\r\n                            </Card>\r\n                        </Link>\r\n                    ))\r\n                )\r\n            }\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default HomePresenter;","import { gql } from \"apollo-boost\";\r\n\r\nexport const GET_MOVIES = gql`\r\n    query getMovies {\r\n        GetMovies {\r\n            title\r\n            id\r\n            genres\r\n            medium_cover_image\r\n            summary\r\n            rating\r\n        }\r\n    }\r\n`;","import Home from './HomeContainer';\r\nexport default Home;","import React from \"react\";\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport { Query } from \"react-apollo\";\r\nimport { GET_MOVIES } from \"./HomeQueries\";\r\n\r\n\r\nclass HomeContainer extends React.Component {\r\n\r\n    render = () => {\r\n        \r\n        return (\r\n            <Query query={GET_MOVIES}>\r\n                {\r\n                    ({loading, data}: {loading: boolean, data: any}) => {\r\n                        console.log(data);\r\n                        return (\r\n                            <HomePresenter \r\n                            data={data}\r\n                            loading={loading}\r\n                            />\r\n                        )\r\n                    }\r\n                }\r\n            </Query >\r\n        );\r\n    }\r\n}\r\n\r\nexport default HomeContainer;","import React from \"react\";\r\nimport styled from \"../../typed-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Container = styled.div`\r\n`;\r\nconst Movie = styled.div`\r\n    display: flex;\r\n    flex-flow: row wrap;\r\n`;\r\n\r\nconst Header = styled(Link)`\r\n    display: flex;\r\n    background-color: black;\r\n    color: white;\r\n    padding: 10px;\r\n    align-items: center;\r\n    font-size: 20px;\r\n    & svg {\r\n        fill: white;\r\n        margin-right: 10px;\r\n    }\r\n`;\r\n\r\nconst MovieProfile = styled.div`\r\nmargin-top: 30px;\r\nmax-width: 300px;\r\n@media(max-width: 500px) {\r\n    margin: 20px auto;\r\n}\r\n`;\r\nconst MovieIntro = styled.div`\r\n    min-width: 300px;\r\n`;\r\nconst CoverImg = styled.img`\r\n    width: 100%;\r\n    display: block;\r\n`;\r\nconst Title = styled.h3`\r\n    font-size: 30px;\r\n    font-weight: 600;\r\n`\r\nconst Rating = styled.span`\r\n    color: red;\r\n    font-size: 22px;\r\n`\r\nconst Genres = styled.div`\r\nmargin-bottom: 20px;\r\ncolor: ${props => props.theme.grayColor};\r\n`;\r\nconst Genre = styled.span`\r\nmargin-right: 5px;\r\n\r\n`;\r\n\r\nconst Text = styled.span``;\r\n\r\nconst Subscription = styled.div``;\r\n\r\ninterface IProps {\r\n    data?: any;\r\n    loading: boolean;\r\n}\r\nconst MoviePresenter: React.FC<IProps> = ({\r\n    data,\r\n    loading\r\n}) => {\r\n\r\n    const isTrue = !loading && data && data.GetMovie;\r\n    const movie = data.GetMovie;\r\n    return (\r\n        <Container>\r\n        {\r\n            isTrue && (\r\n                <React.Fragment>\r\n                    <Header to={\"/\"}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"18\" viewBox=\"0 0 24 24\"><path d=\"M16.67 0l2.83 2.829-9.339 9.175 9.339 9.167-2.83 2.829-12.17-11.996z\"/></svg>\r\n                        이전페이지\r\n                    </Header>\r\n                    \r\n                    <Movie>\r\n                        <MovieProfile>\r\n                                <CoverImg src={movie.large_cover_image}/>\r\n                            </MovieProfile>\r\n                            <MovieIntro>\r\n                                <Title>{movie.title} / <Rating> ★ {movie.rating}</Rating></Title>\r\n                                <Genres>\r\n                                    {\r\n                                        movie.genres.map((movie: string, key: number) => <Genre key={key}>{movie}</Genre>)\r\n                                    }\r\n                                </Genres>\r\n                                <Subscription>\r\n                                    <Text>{movie.description_intro}</Text>\r\n                                </Subscription>\r\n                            </MovieIntro>\r\n                        </Movie>\r\n                    </React.Fragment>\r\n            )\r\n        }\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default MoviePresenter;","import { gql } from \"apollo-boost\";\r\n\r\nexport const GET_MOVIE = gql`\r\n    query getMovie($movieId: Int!) {\r\n        GetMovie(movieId: $movieId) {\r\n            id\r\n            title\r\n            genres\r\n            description_intro\r\n            rating\r\n            large_cover_image\r\n        }\r\n    }\r\n`;","import Movie from \"./MovieContainer\";\r\nexport default Movie;","import React from \"react\";\r\nimport MoviePresenter from \"./MoviePresenter\";\r\nimport { RouteComponentProps } from \"react-router\";\r\nimport { Query } from \"react-apollo\";\r\nimport { GET_MOVIE } from \"./MovieQueries\";\r\n\r\ninterface IProps extends RouteComponentProps<any> {}\r\n\r\nclass MovieContainer extends React.Component<IProps> {\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n        const { history } = this.props;\r\n        if(!props.match.params!.movieId) {\r\n            history.push(\"/\");\r\n        }\r\n    }\r\n    render = () => {\r\n        const { movieId } = this.props.match.params;\r\n        \r\n        return (\r\n            <Query \r\n            query={GET_MOVIE}\r\n            variables={{\r\n                movieId: parseInt(movieId)\r\n            }}\r\n            >\r\n                {\r\n                    ({data, loading}: {data: any, loading: boolean}) => (\r\n                        <MoviePresenter \r\n                            data={data}\r\n                            loading={loading}\r\n                        />\r\n                    )\r\n                }\r\n            </Query>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default MovieContainer;","import React from \"react\";\r\nimport { Route, Redirect, Switch, BrowserRouter } from \"react-router-dom\";\r\nimport { ThemeProvider } from \"./typed-components\";\r\nimport theme from \"./theme\";\r\nimport Home from \"./Routes/Home\";\r\nimport Movie from \"./Routes/Movie\";\r\n\r\nconst App = () => (\r\n    <ThemeProvider theme={theme}>\r\n        <AppPresenter />\r\n    </ThemeProvider>\r\n);\r\nconst AppPresenter = () => (\r\n    <BrowserRouter>\r\n        <Switch>\r\n            <Route path={\"/\"} exact={true} component={Home}/>\r\n            <Route path={\"/details/:movieId\"} exact={true} component={Movie}/>\r\n            <Redirect from={\"*\"} to={\"/\"}/>\r\n        </Switch>\r\n    </BrowserRouter>\r\n)\r\nexport default App;","import ApolloClient from \"apollo-boost\";\r\n\r\nconst client = new ApolloClient({\r\n    uri: \"http://localhost:4000/myGraphql\"\r\n});\r\n\r\nexport default client;","import { createGlobalStyle } from \"./typed-components\";\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    \r\n    html, body {\r\n        margin: 0;\r\n        padding: 0;\r\n        font-family: -apple-system,system-ui,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif\r\n    }\r\n    a, li, ul {\r\n        padding: 0;\r\n        margin: 0;\r\n        list-style: none;\r\n    }\r\n    a {\r\n        text-decoration: none;\r\n        color: inherit;\r\n    }\r\n\r\n`;\r\n\r\nexport default GlobalStyle;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { ApolloProvider } from \"react-apollo\";\nimport App from \"./App\";\nimport client from \"./apollo\";\nimport GlobalStyle from \"./global-styles\";\n\nReactDOM.render(\n<ApolloProvider client={client}>\n    <App/>\n    <GlobalStyle />\n</ApolloProvider>\n, document.getElementById('root'));"],"sourceRoot":""}